#version: "3.8"

services:
  # Base de données pour le service d'authentification
  mysql-auth-db:
    image: mysql:8.0
    container_name: mysql-auth-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: authdb
      MYSQL_PASSWORD: root
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql-auth-data:/var/lib/mysql
      - ./init-db/auth:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --skip-name-resolve
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s
    restart: unless-stopped

  # Base de données pour le service produit
  mysql-product-db:
    image: mysql:8.0
    container_name: mysql-product-db
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: productdb
      MYSQL_PASSWORD: root
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql-product-data:/var/lib/mysql
      - ./init-db/product:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --skip-name-resolve
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s
    restart: unless-stopped

  mysql-order-db:
    image: mysql:8.0
    container_name: mysql-order-db
    ports:
      - "3309:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orderdb
      MYSQL_PASSWORD: root
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql-order-data:/var/lib/mysql
      - ./init-db/order:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --skip-name-resolve
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq # Ajout du volume pour persister les données
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - DB_HOST=mysql-auth-db
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=authdb
      - JWT_SECRET=supersecret
    volumes:
      - ./auth-service:/usr/src/app
    depends_on:
      mysql-auth-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  product-service:
    build:
      context: ./product-service
    container_name: product-service
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
      - DB_HOST=mysql-product-db
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=productdb
      - JWT_SECRET=supersecret
    volumes:
      - ./product-service/uploads:/app/uploads
    depends_on:
      mysql-product-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  order-service:
    build:
      context: ./order-service
    container_name: order-service
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
      - DB_HOST=mysql-order-db
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_NAME=orderdb
    # volumes:
    #   - ./order-service:/app
    depends_on:
      mysql-order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  admin-event-server:
    build:
      context: .
      dockerfile: admin-event-server.Dockerfile
    container_name: admin-event-server
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_URL=amqp://admin:password@rabbitmq
    ports:
      - "4000:4000"
    restart: unless-stopped

  # === MONITORING ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - auth-service
      - product-service
      - order-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ../monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    depends_on:
      - prometheus

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: rabbitmq-exporter
    environment:
      - RABBIT_URL=http://admin:password@rabbitmq:15672
    ports:
      - "15692:15692"
    restart: unless-stopped
    depends_on:
      - rabbitmq

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    restart: unless-stopped

volumes:
  mysql-auth-data:
  mysql-product-data:
  mysql-order-data:
  rabbitmq-data:
  prometheus_data:
  grafana_data:
  sonarqube_data:
  sonarqube_extensions:

